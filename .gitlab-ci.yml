image: docker:19

services:
  - docker:19-dind

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main")
      variables:
        PIPELINE_NAME: CI
    - if: $CI_COMMIT_REF_NAME == 'main'
      variables:
        PIPELINE_NAME: CD
    - if: $CI_COMMIT_TAG && $CI_COMMIT_REF_NAME == 'main'
      variables:
        PIPELINE_NAME: CD
    - when: never

cache:
  paths:
    - ./.m2/repository
    # keep cache across branch
  key: "$CI_BUILD_REF_NAME"

stages:
  - ci
  - package
  - build
  - deploy

sonarqube:
  image: maven:3.8.5-jdk-11
  stage: ci
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}-sonarqube"
    policy: pull-push
    paths:
      - "${SONAR_USER_HOME}/cache"
  script: 
    - |
      mvn verify sonar:sonar \
      -Dsonar.qualitygate.wait=true \
      -Dsonar.projectKey=${CI_PROJECT_NAME} \
      -Dsonar.projectName=${CI_PROJECT_PATH_SLUG} \
      -Dsonar.projectVersion=${CI_COMMIT_SHA:0:7} \
      -DsourceEncoding=UTF-8 
  allow_failure: true
  rules:
    - if: $PIPELINE_NAME == "CI" || $PIPELINE_NAME == "CD"
    - when: never

package:
  image: maven:3.8.5-jdk-11
  stage: package
  script:
    - mvn -T20 clean install
  artifacts:
    paths:
      - modules/clb-api/target/clb-api-0.0.1-SNAPSHOT.jar
    expire_in: 1 hr
  rules:
    - if: $PIPELINE_NAME == "CD"
    - when: never

build:
  stage: build
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker logout
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build --no-cache -t "$CI_REGISTRY_IMAGE:latest" .
    - docker push $CI_REGISTRY_IMAGE:latest
  rules:
    - if: $PIPELINE_NAME == "CD"
    - when: never

deploy:
  image:
    name: google/cloud-sdk
  stage: deploy
  script:
    # Install Helm
    - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
    - echo $GCLOUD_SERVICE_KEY |  base64 -d > ${HOME}/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
    - gcloud config set project watch-bet-383403
    - gcloud config set container/cluster cloudbet-cluster
    - gcloud config set compute/zone australia-southeast1-a
    - gcloud container clusters get-credentials cloudbet-cluster --zone australia-southeast1-a --project watch-bet-383403
#    - kubectl config get-contexts
#    - kubectl config use-context $CI_PROJECT_PATH:cloudbet-agent
    - kubectl config set-context --current --namespace=default
    - kubectl get pod
    - cd charts/clb-charts
    - helm upgrade --install clb-be -n default .
    - kubectl rollout restart deployment clb-be
  rules:
    - if: $PIPELINE_NAME == "CD"
    - when: never
